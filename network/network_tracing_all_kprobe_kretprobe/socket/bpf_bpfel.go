// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bpfEvent struct{ Args [6]uint64 }

// loadBpf returns the embedded CollectionSpec for bpf.
func loadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf: %w", err)
	}

	return spec, err
}

// loadBpfObjects loads bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bpfObjects
//	*bpfPrograms
//	*bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfSpecs struct {
	bpfProgramSpecs
	bpfMapSpecs
}

// bpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfProgramSpecs struct {
	X64SysAccept           *ebpf.ProgramSpec `ebpf:"__x64_sys_accept"`
	X64SysBind             *ebpf.ProgramSpec `ebpf:"__x64_sys_bind"`
	X64SysConnect          *ebpf.ProgramSpec `ebpf:"__x64_sys_connect"`
	X64SysListen           *ebpf.ProgramSpec `ebpf:"__x64_sys_listen"`
	X64SysSocket           *ebpf.ProgramSpec `ebpf:"__x64_sys_socket"`
	KprobeTcpConnect       *ebpf.ProgramSpec `ebpf:"kprobe__tcp_connect"`
	KretprobeInetCskAccept *ebpf.ProgramSpec `ebpf:"kretprobe__inet_csk_accept"`
	SysAccept              *ebpf.ProgramSpec `ebpf:"sys_accept"`
	SysBind                *ebpf.ProgramSpec `ebpf:"sys_bind"`
	SysConnect             *ebpf.ProgramSpec `ebpf:"sys_connect"`
	SysListen              *ebpf.ProgramSpec `ebpf:"sys_listen"`
	SysSocket              *ebpf.ProgramSpec `ebpf:"sys_socket"`
}

// bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfMapSpecs struct {
	ArgsMap    *ebpf.MapSpec `ebpf:"args_map"`
	Bufs       *ebpf.MapSpec `ebpf:"bufs"`
	BufsOffset *ebpf.MapSpec `ebpf:"bufs_offset"`
	SysEvents  *ebpf.MapSpec `ebpf:"sys_events"`
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
}

func (o *bpfObjects) Close() error {
	return _BpfClose(
		&o.bpfPrograms,
		&o.bpfMaps,
	)
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfMaps struct {
	ArgsMap    *ebpf.Map `ebpf:"args_map"`
	Bufs       *ebpf.Map `ebpf:"bufs"`
	BufsOffset *ebpf.Map `ebpf:"bufs_offset"`
	SysEvents  *ebpf.Map `ebpf:"sys_events"`
}

func (m *bpfMaps) Close() error {
	return _BpfClose(
		m.ArgsMap,
		m.Bufs,
		m.BufsOffset,
		m.SysEvents,
	)
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfPrograms struct {
	X64SysAccept           *ebpf.Program `ebpf:"__x64_sys_accept"`
	X64SysBind             *ebpf.Program `ebpf:"__x64_sys_bind"`
	X64SysConnect          *ebpf.Program `ebpf:"__x64_sys_connect"`
	X64SysListen           *ebpf.Program `ebpf:"__x64_sys_listen"`
	X64SysSocket           *ebpf.Program `ebpf:"__x64_sys_socket"`
	KprobeTcpConnect       *ebpf.Program `ebpf:"kprobe__tcp_connect"`
	KretprobeInetCskAccept *ebpf.Program `ebpf:"kretprobe__inet_csk_accept"`
	SysAccept              *ebpf.Program `ebpf:"sys_accept"`
	SysBind                *ebpf.Program `ebpf:"sys_bind"`
	SysConnect             *ebpf.Program `ebpf:"sys_connect"`
	SysListen              *ebpf.Program `ebpf:"sys_listen"`
	SysSocket              *ebpf.Program `ebpf:"sys_socket"`
}

func (p *bpfPrograms) Close() error {
	return _BpfClose(
		p.X64SysAccept,
		p.X64SysBind,
		p.X64SysConnect,
		p.X64SysListen,
		p.X64SysSocket,
		p.KprobeTcpConnect,
		p.KretprobeInetCskAccept,
		p.SysAccept,
		p.SysBind,
		p.SysConnect,
		p.SysListen,
		p.SysSocket,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_bpfel.o
var _BpfBytes []byte
