/**
*	Type: package
*	Name: main
*	Description: This file serves as the
*                driver for the application, responsible for
*                launching it and making its data available for export.
*
*	Authors: Charan Ravela
*	Created On: 04-24-2023
*
*	Last Modified By: Charan Ravela
*	Last Modified: 04-27-2023
 */
package main

import (
	"fmt"

	"tarian/pkg/misc"
	"tarian/pkg/modules"
)

/**
*	Type: function
*	Name: main
*	Description: This function initializes the application and
*				 starts listening for data generated by the ebpfs
*                programs, while also exporting the data as JSON
*                at a certain frequency and handling termination
*			     signals.
*
*	Exported: false
*
*	Authors: Charan Ravela
*	Created On: 04-24-2023
*
*	Last Modified By: Charan Ravela
*	Last Modified: 04-26-2023
*
 */
func main() {

	// Create a new instance of ProgramData struct
	pc := new()

	// Start export signal and termination signals
	pc.startExportAndTerminationSignals()

	// Loads the ebpfs
	pc.ebpfPrograms = modules.NewEbpfs(pc.channels.common)

	// Start all the ebpf programs
	pc.start()

	fmt.Print("\nApplication started. Listening for incoming data.\n\n")

	// Listen to the channels for data, termination and export signals
	for {
		select {
		//Data channel - Listens for data generated by ebpfs
		case v := <-pc.channels.common.DataChan:
			pc.cache = append(pc.cache, *v)

			pc.stats.totalCapturedCount++
			pc.currStats.totalCapturedCount++

			if pc.config.printToScreen {
				misc.PrintMap(misc.StructToMap(*v))
			}

		//Export channel - Listens for export signals to export data
		case vt := <-pc.channels.exportChan:
			fmt.Print("\n\n", vt, "\n\n")
			if pc.config.exportAs[0].enabled && pc.currStats.totalCapturedCount > 0 {
				pc.export()
			}

		//Stop channel - Listens to termination signals
		case <-pc.channels.common.StopperChan:
			if pc.config.exportAs[0].enabled && pc.currStats.totalCapturedCount > 0 {
				pc.export()
			}

			pc.should_stop = true
			pc.stop()
		}

		if pc.config.showProgress {
			pc.programProgress()
		}

		// Terminates if termination signal received
		if pc.should_stop {
			break
		}
	}
}
